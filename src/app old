import React, { useRef, useState } from "react";
import {
  Upload, LayoutDashboard, Tags, ActivitySquare, Variable,
  FileText, FlaskConical
} from "lucide-react";
import {
  PieChart, Pie, Cell, Tooltip, ResponsiveContainer,
  BarChart, Bar, XAxis, YAxis, CartesianGrid, Legend
} from "recharts";

interface GTMContainer {
  tag?: any[];
  trigger?: any[];
  variable?: any[];
  containerId?: string;
  containerVersionId?: string;
  containerVersion?: {
    container?: { publicId?: string };
  };
}

export default function GTMAnalyzer() {
  const [container, setContainer] = useState<GTMContainer | null>(null);
  const [page, setPage] = useState<"dashboard" | "tags" | "triggers" | "variables" | "plan" | "testing">("dashboard");

  const handleFile = async (file: File) => {
    try {
      const json = JSON.parse(await file.text());
      const candidate = json.tag && json.trigger
        ? json
        : json.containerVersion?.tag
          ? json.containerVersion
          : undefined;
      if (!candidate) throw new Error();
      setContainer(candidate);
    } catch {
      alert("‚ùå Il file non sembra un JSON valido GTM.");
    }
  };

  return (
    <div className="flex min-h-screen font-sans">
      <Sidebar current={page} setCurrent={setPage} />
      <main className="flex-1 p-6 space-y-6 bg-gray-50 overflow-y-auto">
        {!container && <FileUpload onFile={handleFile} />}
        {container && page === "dashboard" && (
          <Dashboard data={container} onReplace={() => setContainer(null)} />
        )}
        {container && page === "tags" && <List items={container.tag ?? []} type="tag" />}        
        {container && page === "triggers" && <div>Sezione Trigger</div>}
        {container && page === "variables" && <div>Sezione Variabili</div>}
        {container && page === "plan" && <div>Sezione Piano</div>}
        {container && page === "testing" && <div>Sezione Testing</div>}
      </main>
    </div>
  );
}

function Sidebar({ current, setCurrent }: { current: string; setCurrent: (p: any) => void }) {
  const links = [
    { id: "dashboard", label: "Dashboard", icon: LayoutDashboard },
    { id: "tags", label: "Tag", icon: Tags },
    { id: "triggers", label: "Trigger", icon: ActivitySquare },
    { id: "variables", label: "Variabili", icon: Variable },
    { id: "plan", label: "Piano", icon: FileText },
    { id: "testing", label: "Testing", icon: FlaskConical }
  ];
  return (
    <aside className="w-64 bg-[#1a365d] text-white py-6 space-y-2 shrink-0">
      <h1 className="text-center font-bold text-xl mb-4">GTM Analyzer</h1>
      {links.map(({ id, label, icon: Icon }) => (
        <button
          key={id}
          onClick={() => setCurrent(id)}
          className={`w-full flex gap-2 items-center px-5 py-2 hover:bg-white/10 transition ${current === id ? "bg-white/10" : ""}`}
        >
          <Icon className="w-5 h-5" /> {label}
        </button>
      ))}
    </aside>
  );
}

function FileUpload({ onFile }: { onFile: (f: File) => void }) {
  const input = useRef<HTMLInputElement>(null);
  return (
    <div onClick={() => input.current?.click()} className="border-2 border-dashed rounded-xl p-6 text-center cursor-pointer bg-white border-gray-300">
      <Upload className="mx-auto w-8 h-8 text-[#FF6B35]" />
      <p className="mt-2 text-sm text-gray-600">Clicca o trascina qui il file JSON del contenitore GTM</p>
      <input ref={input} hidden type="file" accept="application/json" onChange={(e) => e.target.files?.[0] && onFile(e.target.files[0])} />
    </div>
  );
}

function Dashboard({ data, onReplace }: { data: GTMContainer; onReplace: () => void }) {
  const tagCount = data.tag?.length ?? 0;
  const triggerCount = data.trigger?.length ?? 0;
  const varCount = data.variable?.length ?? 0;

  const typeLabels: Record<string, string> = {
    awct: "Google Ads Conversion",
    gclidw: "GCLID Linker",
    sp: "Google Ads Remarketing",
    img: "Pixel Image",
    html: "Custom HTML",
    ua: "Universal Analytics",
    gaawc: "GA4 Event",
    ldp: "LinkedIn Insight"
  };

  const tagsByType: Record<string, number> = {};
  data.tag?.forEach((tag) => {
    const rawType = tag.type || "(sconosciuto)";
    tagsByType[rawType] = (tagsByType[rawType] || 0) + 1;
  });

  const pieData = Object.entries(tagsByType).map(([type, value]) => {
    const label = typeLabels[type] || data.tag?.find((t) => t.type === type)?.name?.slice(0, 40) || "Altro";
    return { name: label, value };
  });

  const topBarData = [...pieData].sort((a, b) => b.value - a.value).slice(0, 5);
  const colors = ["#FF6B35", "#1a365d", "#4caf50", "#ffc107", "#2196f3"];

  const namelessTags = data.tag?.filter((t) => !t.name)?.length ?? 0;
  const unusedTriggers = (data.trigger ?? []).filter(
    (tr) => !(data.tag ?? []).some((tag) => (tag.triggerId ?? []).includes(tr.triggerId))
  ).length;

  const containerId = data.containerVersion?.container?.publicId ?? data.containerId ?? "(ID sconosciuto)";
  const versione = data.containerVersionId ?? "-";

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-2xl font-bold text-[#1a365d]">üìä Dashboard del Contenitore</h1>
          <p className="text-sm text-gray-600 mt-1">
            ID: <strong>{containerId}</strong> ‚Äì Versione: <strong>{versione}</strong>
          </p>
        </div>
        <button onClick={onReplace} className="px-4 py-2 bg-[#FF6B35] text-white rounded-md text-sm shadow hover:brightness-110 transition">
          Sostituisci file JSON
        </button>
      </div>

      <div className="grid grid-cols-3 gap-6">
        <Card title="Tag" value={tagCount} />
        <Card title="Trigger" value={triggerCount} />
        <Card title="Variabili" value={varCount} />
      </div>

      <div className="grid grid-cols-2 gap-6">
        <div className="bg-white p-4 rounded-xl shadow">
          <h2 className="text-lg font-semibold mb-2">Distribuzione tipi di tag</h2>
          {pieData.length > 0 ? (
            <ResponsiveContainer width="100%" height={250}>
              <PieChart>
                <Pie data={pieData} dataKey="value" nameKey="name" cx="50%" cy="50%" outerRadius={80}>
                  {pieData.map((_, index) => (
                    <Cell key={index} fill={colors[index % colors.length]} />
                  ))}
                </Pie>
                <Tooltip formatter={(value, name) => [`${value}`, `${name}`]} />
              </PieChart>
            </ResponsiveContainer>
          ) : (
            <p className="text-sm text-gray-500 italic mt-4">Nessun tipo di tag disponibile per il grafico.</p>
          )}
        </div>

        <div className="bg-white p-4 rounded-xl shadow space-y-2">
          <h2 className="text-lg font-semibold">üìå Metriche rapide</h2>
          <ul className="list-disc pl-5 text-sm text-gray-700 leading-6">
            <li>{namelessTags} tag senza nome</li>
            <li>{unusedTriggers} trigger non utilizzati</li>
            <li>{Object.keys(tagsByType).length} tipi di tag unici rilevati</li>
            <li>Top tipo: <strong>{pieData[0]?.name || "-"}</strong> ({pieData[0]?.value || 0} occorrenze)</li>
          </ul>
        </div>
      </div>

      <div className="bg-white p-4 rounded-xl shadow">
        <h2 className="text-lg font-semibold mb-2">üèÜ Classifica tipi di tag (Top 5)</h2>
        <ResponsiveContainer width="100%" height={250}>
          <BarChart data={topBarData} layout="vertical" margin={{ left: 40, right: 20 }}>
            <CartesianGrid strokeDasharray="3 3" />
            <XAxis type="number" />
            <YAxis dataKey="name" type="category" width={200} />
            <Tooltip />
            <Legend />
            <Bar dataKey="value" fill="#1a365d" radius={[0, 6, 6, 0]} />
          </BarChart>
        </ResponsiveContainer>
      </div>
    </div>
  );
}

function Card({ title, value }: { title: string; value: number }) {
  return (
    <div className="bg-white rounded-xl shadow p-6 text-center">
      <div className="text-4xl font-bold text-[#1a365d]">{value}</div>
      <div className="mt-1 text-sm">{title}</div>
    </div>
  );
}

import { Info, Sparkles } from "lucide-react";

function List({ items, type }: { items: any[]; type: "tag" | "trigger" | "variable" }) {
  const explain = (item: any) => {
    if (type === "tag") return `üîñ Tag tipo "${item.type}" con trigger ${item.triggerId?.join(", ") ?? "‚Äì"}`;
    if (type === "trigger") return `‚ö° Trigger attivo quando ${item.filter?.map((f: any) => `${f.type} ${f.value}`).join(" e ")}`;
    return `üì¶ Variabile di tipo "${item.type}"`;
  };

  return (
    <div className="space-y-4">
      {items.map((it, index) => {
        const id = it.tagId || it.triggerId || it.variableId || index;
        return (
          <div key={id} className="bg-white rounded-xl shadow p-4 flex justify-between items-center">
            <div>
              <h3 className="font-semibold">{it.name ?? "(senza nome)"}</h3>
              <p className="text-xs text-gray-500">ID: {id}</p>
            </div>
            <div className="flex gap-2">
              <button onClick={() => alert(JSON.stringify(it, null, 2))} className="px-3 py-1.5 rounded bg-[#1a365d] text-white text-sm flex items-center gap-1">
                <Info className="w-4 h-4" /> Dettagli
              </button>
              <button onClick={() => alert(explain(it))} className="px-3 py-1.5 rounded bg-[#FF6B35] text-white text-sm flex items-center gap-1">
                <Sparkles className="w-4 h-4" /> AI
              </button>
            </div>
          </div>
        );
      })}
    </div>
  );
}